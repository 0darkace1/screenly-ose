#!/usr/bin/env python

import configparser
import syslog

# The config files we're working with
INTERFACES_PATH = '/etc/network/interfaces'
NETWORK_PATH = '/boot/network.ini'
RESOLV_PATH = '/etc/resolv.conf'
NTP_PATH = '/etc/ntp.conf'

INTERFACES_TEMPLATE = """# Generated by Screenly Network Manager
auto lo
  iface lo inet loopback
"""


def if_config(
        static=False,
        ip=None,
        netmask=None,
        gateway=None,
        interface='eth0',
        ssid=None,
        passphrase=None
):
    if static:
        interface_stanza = """
auto {}
  iface {} inet static
  address {}
  netmask {}
  gateway {}""".format(interface, interface, ip, netmask, gateway)
    else:
        interface_stanza = """
auto {}
  iface {} inet dhcp""".format(interface, interface)

    # If wifi configuration
    if ssid:
        interface_stanza += '\n  wpa-ssid "{}"'.format(ssid)
    if passphrase:
        interface_stanza += '\n  wpa-psk "{}"'.format(passphrase)

    # Make sure we end with a newline
    interface_stanza += '\n'

    return interface_stanza


def generate_ntp_conf(ntpservers=[
        '0.pool.ntp.org',
        '1.pool.ntp.org',
        '2.pool.ntp.org'
]):
    """
    Generates a `ntp.conf` file.
    :param ntpservers: NTP servers (list)
    """

    if not isinstance(ntpservers, list):
        syslog.syslog(syslog.LOG_ERR, '"{}" is an invalid NTP option.'.format(ntpservers))
        return False

    ntp_conf = """# Generated by Screenly Network Manager
driftfile /var/lib/ntp/ntp.drift

statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery

restrict 127.0.0.1
restrict ::1
"""

    for s in ntpservers:
        ntp_conf += "server {} iburst\n".format(s.lower())

    return ntp_conf


def generate_resolv_conf(dns=[
    '8.8.8.8',
    '8.8.4.4'
]):
    """
    Generates a `resolv.conf` file.
    :param dns: DNS servers (list)
    """

    if not isinstance(dns, list):
        syslog.syslog(syslog.LOG_ERR, '"{}" is an invalid DNS option.'.format(dns))
        return False

    resolv_file = "# Generated by Screenly Network Manager\n"

    for i in dns:
        resolv_file += 'nameserver {}\n'.format(i.lower())

    return resolv_file


def write_file(path, content):

    with open(path, 'r') as f:
        orig_file = f.read()

    differs = orig_file != content

    if differs:
        with open(path, 'w') as f:
            f.write(content)
        syslog.syslog('Wrote an updated version of {}'.format(path))
    else:
        syslog.syslog('No changes were made to {}.'.format(path))


def lookup(config, interface, key):
    try:
        value = config[interface][key]
        syslog.syslog('[{}] Found value "{}" for key "{}".'.format(interface, value, key))
    except:
        syslog.syslog(syslog.LOG_ERR, '[{}] Unable to find value for key {}.'.format(interface, key))
        return False

    return value


def is_dhcp(config, interface):
    """
    Determine if DHCP should be used or not with some basic logic.
    """
    try:
        if_mode = config[interface]['mode']
        if if_mode.lower() in ['dynamic', 'dhcp']:
            return True
        elif if_mode.lower() == 'static':
            return False
        else:
            syslog.syslog(syslog.LOG_ERR, '[{}] "{}" is an invalid network mode.'.format(interface, if_mode))
            syslog.syslog(syslog.LOG_ERR, '[{}] Reverting to DHCP.'.format(interface))
    except:
        syslog.syslog(syslog.LOG_ERR, '[{}] No mode specified. Using DHCP.'.format(interface))

    try:
        # If 'ip', 'netmask' and 'gateway' is set, use static mode.
        if config[interface]['ip'] and config[interface]['netmask'] and config[interface]['gateway']:
            syslog.syslog(syslog.LOG_ERR, '[{}] Found static components. Using static config.'.format(interface))
            return False
    except:
        return True


def main():
    config = configparser.ConfigParser()
    config.read(NETWORK_PATH)

    syslog.syslog('Started Screenly Network Manager.')

    """
    Configure network interfaces
    """

    interfaces = INTERFACES_TEMPLATE

    """
    Configuration for eth0
    """

    eth0_dhcp = is_dhcp(config, 'eth0')

    if eth0_dhcp:
        interfaces += if_config(interface='eth0')
    else:
        eth0_ip = lookup(config, 'eth0', 'ip')
        eth0_netmask = lookup(config, 'eth0', 'netmask')
        eth0_gateway = lookup(config, 'eth0', 'gateway')

        interfaces += if_config(
            interface='eth0',
            static=True,
            ip=eth0_ip,
            netmask=eth0_netmask,
            gateway=eth0_gateway
        )

    if config.has_section('wlan0'):
        wlan0_dhcp = is_dhcp(config, 'wlan0')
        ssid = lookup(config, 'wlan0', 'ssid')
        passphrase = lookup(config, 'wlan0', 'passphrase') if config.has_option('wlan0', 'passphrase') else None

        if wlan0_dhcp:
            interfaces += if_config(
                interface='wlan0',
                ssid=ssid,
                passphrase=passphrase
            )
        else:
            wlan0_ip = lookup(config, 'wlan0', 'ip')
            wlan0_netmask = lookup(config, 'wlan0', 'netmask')
            wlan0_gateway = lookup(config, 'wlan0', 'gateway')

            interfaces += if_config(
                interface='wlan0',
                static=True,
                ip=wlan0_ip,
                netmask=wlan0_netmask,
                gateway=wlan0_gateway,
                ssid=ssid,
                passphrase=passphrase
            )

    write_file(INTERFACES_PATH, interfaces)

    """
    Configure DNS
    """

    if config.has_option('generic', 'dns'):
        resolv_conf = generate_resolv_conf(config['generic']['dns'].split(','))
        if resolv_conf:
            write_file(RESOLV_PATH, resolv_conf)
        else:
            syslog.syslog(syslog.LOG_ERR, 'Unable to read DNS settings.')

    """
    Configure NTP
    """

    if config.has_option('generic', 'ntp'):
        ntp_conf = generate_ntp_conf(config['generic']['ntp'].split(','))
        if ntp_conf:
            write_file(NTP_PATH, ntp_conf)
        else:
            syslog.syslog(syslog.LOG_ERR, 'Unable to read NTP settings.')

    syslog.syslog('Screenly Network Manager finished.')


if __name__ == "__main__":
    main()
